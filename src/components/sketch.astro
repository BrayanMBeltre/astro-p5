<div
    id="canvas"
    class="w-screen h-full max-w-[768px]"
    draggable="false"
    oncontextmenu="return false"
    onselectstart="return false"
    ondragstart="return false"
>
</div>

<script src="https://cdn.jsdelivr.net/npm/p5@1.9.1/lib/p5.js"></script>

<script>
    const canvas = document.getElementById("canvas")!;
    const lifeBar = document.getElementById("life-bar")!;
    const fpsCounter = document.getElementById("fps-counter")!;

    // lifeBar.textContent = "Life: 100";

    import { Player } from "@/game/player";
    import { Opponent } from "@/game/opponent";
    import { RoadSegment } from "@/game/road";

    const sketch = (p: p5) => {
        // Images
        let redCardImage: p5.Image;
        let greenCardImage: p5.Image;

        let player: Player;
        let playerCarWidth = 50;
        let playerCarHeight = 100;
        let oppoents: Array<Opponent> = [];
        let life = 40;
        let isGameOver = false;

        // Road
        let roadColor = "#242526";
        let segments: Array<RoadSegment> = [];
        let lanes: number;
        let segmentSpeed = 5;
        let laneWidth: number;

        p.preload = () => {
            redCardImage = p.loadImage("/assets/Car_Red.png");
            greenCardImage = p.loadImage("/assets/Car_Green.png");
        };

        p.setup = () => {
            p.createCanvas(canvas.clientWidth, canvas.clientHeight);

            // TODO: Move this to the segment class
            // check how many lanes we can fit given the width of the cars and the width of the canvas
            laneWidth = playerCarWidth * 2;
            lanes = Math.round(canvas.clientWidth / laneWidth);
            // leave the same amount of space on the left and right of the road
            let roadEdge = (canvas.clientWidth - lanes * laneWidth) / 2;

            console.log(lanes);

            for (let i = 0; i < lanes; i++) {
                segments.push(
                    new RoadSegment({
                        x: i * laneWidth + roadEdge,
                        // y: -p.height,
                        y: 200,
                        speed: segmentSpeed,
                    }),
                );
            }

            player = new Player({
                x: p.width / 2,
                y: p.height - 200,
                image: greenCardImage,
                height: playerCarHeight,
                width: playerCarWidth,
                speed: 5,
            });
        };

        p.draw = () => {
            fpsCounter.textContent = `FPS: ${p.frameRate().toFixed(2)}`;
            p.background(roadColor);

            // Road
            for (const segment of segments) {
                segment.draw(p);
            }

            // segments = segments.filter((segment) => !segment.isOffScreen(p));

            // for (let i = 0; i < roads.length; i++) {
            //     roads[i].draw(p);

            //     if (roads[i].isOffScreen()) {
            //         roads.splice(i, 1);
            //         i--; // Decrement the loop counter to prevent skipping the next opponent
            //         if (i < 0) break;
            //     }
            // }

            // if (life <= 0) {
            //     // isGameOver = true;
            //     alert("Game Over");
            //     return;
            // }

            lifeBar.textContent = `Life: ${life}`;

            player.draw(p);

            for (let opponent of oppoents) {
                opponent.draw(p);
            }

            oppoents = oppoents.filter((oppoent) => {
                if (oppoent.isOffScreen()) {
                    return false;
                }

                if (oppoent.collidedWithPlayer(player)) {
                    life -= 10;
                    return false;
                }

                return true;
            });

            // if (oppoents[0].state.y > 0) {
            //     oppoents.unshift(
            //         new Opponent({
            //             image: redCardImage,
            //             x: p.random(p.width),
            //             y: -500,
            //             height: 100,
            //             width: 50,
            //             speed: 5,
            //         }),
            //     );
            // }

            if (p.frameCount % 60 === 0) {
                oppoents.push(
                    new Opponent({
                        image: redCardImage,
                        x: p.random(p.width),
                        y: p.height + 500,
                        height: 100,
                        width: 50,
                        speed: 5,
                    }),
                );

                segments.push(
                    new RoadSegment({
                        x: p.random(lanes) * laneWidth,
                        y: -200,
                        speed: segmentSpeed,
                    }),
                );
            }
        };

        p.windowResized = () => {
            p.resizeCanvas(canvas.clientWidth, canvas.clientHeight);
            // rerun the setup function to recalculate the lanes
            p.setup();
        };
    };

    window.addEventListener("DOMContentLoaded", () => {
        new p5(sketch, canvas);
    });
</script>
